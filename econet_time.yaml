---
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      if:
        condition:
          time.has_time:
        then:
          - logger.log:
              format: "System clock was synced; synchronizing microcontroller to Home Assistant time"
              level: INFO
              tag: homeassistant_time_sync
          - number.set:
              id: irtc_year
              value: !lambda return id(homeassistant_time).now().year - 2000;
          - number.set:
              id: irtc_month
              value: !lambda return id(homeassistant_time).now().month;
          - number.set:
              id: irtc_day
              value: !lambda return id(homeassistant_time).now().day_of_month;
          - number.set:
              id: irtc_hour
              value: !lambda return id(homeassistant_time).now().hour;
          - number.set:
              id: irtc_minute
              value: !lambda return id(homeassistant_time).now().minute;
          - number.set:
              id: irtc_seconds
              value: !lambda return id(homeassistant_time).now().second;
        else:
          - logger.log:
              format: "System clock was synced but time is invalid"
              level: WARN
              tag: homeassistant_time_sync
text_sensor:
  - platform: template
    name: "Microcontroller Datetime"
    id: irtc_time
    icon: mdi:calendar-clock
    update_interval: ${econet_update_interval}
    entity_category: "diagnostic"
    disabled_by_default: true
    lambda: |-
      if (isnan(id(irtc_seconds).state)) {
        // Return undefined if values haven't been successfully fetched yet
        return {};
      }
      tm controller_time = {
        .tm_sec = (int) id(irtc_seconds).state,
        .tm_min = (int) id(irtc_minute).state,
        .tm_hour = (int) id(irtc_hour).state,
        .tm_mday = (int) id(irtc_day).state,
        .tm_mon = (int) id(irtc_month).state - 1,  // C++: 0-11, econet: 1-12
        .tm_year = (int) id(irtc_year).state + 2000 - 1900  // C++: years since 1900, econet: since 2000
      };
      char time_string[sizeof("yyyy-mm-ddThh:mm:ss-hhmm")];
      std::strftime(time_string, sizeof(time_string), "%FT%T%z", &controller_time);
      std::string controller_time_string(time_string);
      return controller_time_string;
number:
  - platform: econet
    name: "IRTC Year"
    id: irtc_year
    number_datapoint: IRTCYEAR
    unit_of_measurement: "y"
    step: 1
    min_value: 24
    max_value: 99
    mode: box
    entity_category: "config"
    icon: mdi:calendar-clock
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Month"
    id: irtc_month
    number_datapoint: IRTCMONT
    unit_of_measurement: "m"
    step: 1
    min_value: 1
    max_value: 12
    mode: box
    entity_category: "config"
    icon: mdi:calendar-clock
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Day"
    id: irtc_day
    number_datapoint: IRTCDAYS
    unit_of_measurement: "d"
    step: 1
    min_value: 1
    max_value: 31
    mode: box
    entity_category: "config"
    icon: mdi:calendar-clock
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Hour"
    id: irtc_hour
    number_datapoint: IRTCHOUR
    unit_of_measurement: "h"
    step: 1
    min_value: 0
    max_value: 23
    mode: box
    entity_category: "config"
    icon: mdi:calendar-clock
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Minute"
    id: irtc_minute
    number_datapoint: IRTCMINS
    unit_of_measurement: "min"
    step: 1
    min_value: 0
    max_value: 59
    mode: box
    entity_category: "config"
    icon: mdi:calendar-clock
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Seconds"
    id: irtc_seconds
    number_datapoint: IRTCSECS
    unit_of_measurement: "s"
    step: 1
    min_value: 0
    max_value: 59
    mode: box
    entity_category: "config"
    icon: mdi:calendar-clock
    request_mod: 8
    internal: true
