---
substitutions:
  timezone: America/Los_Angeles

sensor:
  - platform: econet
    name: "IRTC Year"
    id: irtc_year
    sensor_datapoint: IRTCYEAR
    unit_of_measurement: "y"
    accuracy_decimals: 0
    entity_category: "diagnostic"
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Month"
    id: irtc_month
    sensor_datapoint: IRTCMONT
    unit_of_measurement: "y"
    accuracy_decimals: 0
    entity_category: "diagnostic"
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Day"
    id: irtc_day
    sensor_datapoint: IRTCDAYS
    unit_of_measurement: "y"
    accuracy_decimals: 0
    entity_category: "diagnostic"
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Hour"
    id: irtc_hour
    sensor_datapoint: IRTCHOUR
    unit_of_measurement: "y"
    accuracy_decimals: 0
    entity_category: "diagnostic"
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Minute"
    id: irtc_minute
    sensor_datapoint: IRTCMINS
    unit_of_measurement: "y"
    accuracy_decimals: 0
    entity_category: "diagnostic"
    request_mod: 8
    internal: true
  - platform: econet
    name: "IRTC Seconds"
    id: irtc_seconds
    sensor_datapoint: IRTCSECS
    unit_of_measurement: "y"
    accuracy_decimals: 0
    entity_category: "diagnostic"
    request_mod: 8
    internal: true

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: ${timezone}

text_sensor:
  - platform: template
    name: "Microcontroller Datetime"
    id: irtc_time
    icon: mdi:calendar-clock
    update_interval: 30s
    entity_category: "diagnostic"
    disabled_by_default: true
    lambda: |-
      if (!((int) id(irtc_seconds).state >= 0) {
        return {};
      }
      struct tm controllerTime = {
        .tm_sec = (int) id(irtc_seconds).state,
        .tm_min = (int) id(irtc_minute).state,
        .tm_hour = (int) id(irtc_hour).state,
        .tm_mday = (int) id(irtc_day).state,
        .tm_mon = (int) id(irtc_month).state - 1,
        .tm_year = 100 + (int) id(irtc_year).state
      };
      char timeString[20];
      std::strftime(timeString, 20,
                    "%FT%TZ", &controllerTime);
      std::string controllerTimeString(timeString);
      return controllerTimeString;
